using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using WebCinema.Models;

namespace WebCinema.Services
{
    public class AuthService
    {
        private CSDLDataContext db = new CSDLDataContext();

        // Hash password using SHA256
        private string HashPassword(string password)
        {
            using (SHA256 sha256 = SHA256.Create())
            {
                byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    builder.Append(b.ToString("x2"));
                }
                return builder.ToString();
            }
        }

        // Register new customer
        // NOTE: The current database schema may not have mat_khau and ngay_dang_ky fields
        // This is a placeholder implementation. You may need to add these columns to the database.
        public bool Register(RegisterViewModel model, out string errorMessage)
        {
            errorMessage = null;

            // Check if email already exists
            if (db.Khach_Hangs.Any(k => k.email == model.Email))
            {
                errorMessage = "Email đã được sử dụng";
                return false;
            }

            // Check if phone already exists
            if (db.Khach_Hangs.Any(k => k.so_dien_thoai == model.PhoneNumber))
            {
                errorMessage = "Số điện thoại đã được sử dụng";
                return false;
            }

            try
            {
                var customer = new Khach_Hang
                {
                    ho_ten = model.FullName,
                    email = model.Email,
                    so_dien_thoai = model.PhoneNumber
                    // NOTE: If your database has mat_khau and ngay_dang_ky columns, uncomment below:
                    // mat_khau = HashPassword(model.Password),
                    // ngay_dang_ky = DateTime.Now
                };

                db.Khach_Hangs.InsertOnSubmit(customer);
                db.SubmitChanges();
                return true;
            }
            catch (Exception ex)
            {
                errorMessage = "Đã xảy ra lỗi khi đăng ký: " + ex.Message;
                return false;
            }
        }

        // Login: try employee first (Nhan_Vien) then customer (Khach_Hang)
        // NOTE: current DB does not store passwords for Khach_Hang; this implementation treats employee login by email only
        public AuthResult Login(string email, string password)
        {
            var result = new AuthResult { IsAuthenticated = false };

            // Try employee (admin/staff)
            var employee = db.Nhan_Viens.FirstOrDefault(n => n.email == email);
            if (employee != null)
            {
                // For now we don't have password stored for Nhan_Vien either, so accept by email
                // In production, validate password hash
                result.IsAuthenticated = true;
                result.Employee = employee;
                // Decide role: if role_id is null -> Staff, otherwise check Role.ten_role
                try
                {
                    if (employee.role_id.HasValue)
                    {
                        var role = db.Roles.FirstOrDefault(r => r.role_id == employee.role_id.Value);
                        if (role != null && role.ten_role != null && role.ten_role.ToLower().Contains("admin"))
                        {
                            result.Role = "Admin";
                        }
                        else
                        {
                            result.Role = "Staff";
                        }
                    }
                    else
                    {
                        result.Role = "Staff";
                    }
                }
                catch
                {
                    result.Role = "Staff";
                }

                return result;
            }

            // Try customer
            var customer = db.Khach_Hangs.FirstOrDefault(k => k.email == email);
            if (customer != null)
            {
                // No password check for customer in current schema
                result.IsAuthenticated = true;
                result.Customer = customer;
                result.Role = "Customer";
                return result;
            }

            return result;
        }

        // Original login signature kept for backwards compatibility
        public Khach_Hang Login(string email, string password)
        {
            return db.Khach_Hangs.FirstOrDefault(k => k.email == email);
        }

        // Get customer by ID
        public Khach_Hang GetCustomerById(int id)
        {
            return db.Khach_Hangs.FirstOrDefault(k => k.khach_hang_id == id);
        }

        // Get customer by email
        public Khach_Hang GetCustomerByEmail(string email)
        {
            return db.Khach_Hangs.FirstOrDefault(k => k.email == email);
        }

        // Get employee by ID
        public Nhan_Vien GetEmployeeById(int id)
        {
            return db.Nhan_Viens.FirstOrDefault(n => n.nhanvien_id == id);
        }
    }
}