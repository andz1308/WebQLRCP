using System;
using System.Linq;
using System.Web.Mvc;
using WebCinema.Models;
using WebCinema.Infrastructure;

namespace WebCinema.Areas.Admin.Controllers
{
    [RoleAuthorize(Roles = "Admin")]
    public class ReviewManagementController : Controller
    {
        private CSDLDataContext db = new CSDLDataContext();

        // GET: Admin/ReviewManagement
        public ActionResult Index(int? movieId, string status)
        {
            var reviews = db.Danh_Gias.AsQueryable();

            // Lọc theo phim nếu có
            if (movieId.HasValue)
                reviews = reviews.Where(r => r.phim_id == movieId.Value);

            var result = reviews
                .OrderByDescending(r => r.ngay_Danh_Gia)
                .ToList();

            ViewBag.Movies = new SelectList(db.Phims, "phim_id", "ten_phim");
            ViewBag.SelectedMovie = movieId;

            return View(result);
        }

        // POST: Admin/ReviewManagement/Reply
        [HttpPost]
        public ActionResult Reply(int reviewId, string replyContent)
        {
            try
            {
                var originalReview = db.Danh_Gias.FirstOrDefault(r => r.Danh_Gia_id == reviewId);
                if (originalReview == null)
                {
                    return Json(new { success = false, message = "Đánh giá không tồn tại." });
                }

                if (string.IsNullOrWhiteSpace(replyContent))
                {
                    return Json(new { success = false, message = "Nội dung phản hồi không được để trống." });
                }

                // Tạo phản hồi mới (admin)
                var reply = new Danh_Gia
                {
                    phim_id = originalReview.phim_id,
                    ve_id = originalReview.ve_id,
                    khach_hang_id = /*originalReview.khach_hang_id*/ GetAdminKhachHangId(), // tránh lỗi FK
                    noi_dung = replyContent.Trim(),
                    diem_rating = null,
                    ngay_Danh_Gia = DateTime.Now
                };

                db.Danh_Gias.InsertOnSubmit(reply);
                db.SubmitChanges();

                return Json(new { success = true, message = "Phản hồi thành công!" });
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(ex);
                return Json(new { success = false, message = "Lỗi khi phản hồi: " + ex.Message });
            }
        }

        // POST: Admin/ReviewManagement/Delete/5
        [HttpPost]
        public ActionResult Delete(int id)
        {
            try
            {
                var review = db.Danh_Gias.FirstOrDefault(r => r.Danh_Gia_id == id);
                if (review == null)
                {
                    return Json(new { success = false, message = "Đánh giá không tồn tại." });
                }

                db.Danh_Gias.DeleteOnSubmit(review);
                db.SubmitChanges();

                return Json(new { success = true, message = "Xóa đánh giá thành công!" });
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(ex);
                return Json(new { success = false, message = "Lỗi khi xóa đánh giá: " + ex.Message });
            }
        }

        /// <summary>
        /// Trả về ID khách hàng đại diện cho hệ thống admin
        /// </summary>
        private int GetAdminKhachHangId()
        {
            // Bạn nên tạo sẵn 1 khách hàng có tên “Hệ thống (Admin)” trong bảng Khach_Hang
            var adminUser = db.Khach_Hangs.FirstOrDefault(k => k.email == "admin@cinema.local");
            if (adminUser != null)
                return adminUser.khach_hang_id;

            // Nếu chưa có, tạo mới
            var kh = new Khach_Hang
            {
                ho_ten = "Quản Trị Viên",
                email = "admin@cinema.local",
                mat_khau = "admin",
                ngay_dang_ky = DateTime.Now
            };

            db.Khach_Hangs.InsertOnSubmit(kh);
            db.SubmitChanges();

            return kh.khach_hang_id;
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
                db.Dispose();
            base.Dispose(disposing);
        }
    }
}

