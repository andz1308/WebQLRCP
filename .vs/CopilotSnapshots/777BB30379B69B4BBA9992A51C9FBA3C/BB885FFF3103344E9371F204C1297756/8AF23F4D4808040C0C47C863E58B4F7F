using System;
using System.Linq;
using System.Web.Mvc;
using WebCinema.Models;
using WebCinema.Infrastructure;

namespace WebCinema.Areas.Admin.Controllers
{
    [RoleAuthorize(Roles = "Admin")]
    public class DashboardController : Controller
    {
        private CSDLDataContext db = new CSDLDataContext();

        // GET: Admin/Dashboard
        public ActionResult Index(int? month, int? year)
        {
            try
            {
                // Set default year to current year if not provided
                int selectedYear = year ?? DateTime.Now.Year;
                int? selectedMonth = month;

                ViewBag.SelectedMonth = selectedMonth;
                ViewBag.SelectedYear = selectedYear;

                // Filter base query by year and month if specified
                var bookingsQuery = db.Dat_Ves.Where(d => d.ngay_tao.HasValue);
                
                if (selectedMonth.HasValue)
                {
                    bookingsQuery = bookingsQuery.Where(d => 
                        d.ngay_tao.Value.Year == selectedYear && 
                        d.ngay_tao.Value.Month == selectedMonth.Value);
                }
                else
                {
                    bookingsQuery = bookingsQuery.Where(d => d.ngay_tao.Value.Year == selectedYear);
                }

                var totalMovies = db.Phims.Count();
                var totalUsers = db.Khach_Hangs.Count();
                var totalBookings = bookingsQuery.Count();
                var totalRevenue = bookingsQuery.Sum(d => (decimal?)d.tong_tien) ?? 0;

                // Monthly revenue for the selected year
                var monthlyRevenue = selectedMonth.HasValue 
                    ? bookingsQuery.Sum(d => (decimal?)d.tong_tien) ?? 0
                    : db.Dat_Ves
                        .Where(d => d.ngay_tao.HasValue && d.ngay_tao.Value.Year == selectedYear)
                        .Sum(d => (decimal?)d.tong_tien) ?? 0;

                var monthlyBookings = selectedMonth.HasValue
                    ? bookingsQuery.Count()
                    : db.Dat_Ves
                        .Where(d => d.ngay_tao.HasValue && d.ngay_tao.Value.Year == selectedYear)
                        .Count();

                // Top movies
                var topMovies = bookingsQuery
                    .SelectMany(d => d.Ves)
                    .GroupBy(v => v.Suat_Chieu.phim_id)
                    .Select(g => new
                    {
                        PhimId = g.Key,
                        TotalTickets = g.Count(),
                        Revenue = g.Sum(v => (decimal?)v.gia_ve) ?? 0
                    })
                    .OrderByDescending(x => x.TotalTickets)
                    .Take(5)
                    .ToList()
                    .Select(x => new
                    {
                        Movie = db.Phims.FirstOrDefault(p => p.phim_id == x.PhimId),
                        TotalTickets = x.TotalTickets,
                        Revenue = x.Revenue
                    })
                    .Where(x => x.Movie != null)
                    .Take(5)
                    .ToList();

                // Daily revenue for selected period
                var dailyRevenue = selectedMonth.HasValue
                    ? Enumerable.Range(1, DateTime.DaysInMonth(selectedYear, selectedMonth.Value))
                        .Select(day => new
                        {
                            Date = new DateTime(selectedYear, selectedMonth.Value, day),
                            Revenue = db.Dat_Ves
                                .Where(d => d.ngay_tao.HasValue &&
                                           d.ngay_tao.Value.Date == new DateTime(selectedYear, selectedMonth.Value, day))
                                .Sum(d => (decimal?)d.tong_tien) ?? 0
                        }).ToList()
                    : Enumerable.Range(1, 12)
                        .Select(m => new
                        {
                            Date = new DateTime(selectedYear, m, 1),
                            Revenue = db.Dat_Ves
                                .Where(d => d.ngay_tao.HasValue &&
                                           d.ngay_tao.Value.Year == selectedYear &&
                                           d.ngay_tao.Value.Month == m)
                                .Sum(d => (decimal?)d.tong_tien) ?? 0
                        }).ToList();

                ViewBag.TotalMovies = totalMovies;
                ViewBag.TotalUsers = totalUsers;
                ViewBag.TotalBookings = totalBookings;
                ViewBag.TotalRevenue = totalRevenue;
                ViewBag.MonthlyRevenue = monthlyRevenue;
                ViewBag.MonthlyBookings = monthlyBookings;
                ViewBag.TopMovies = topMovies;
                ViewBag.DailyRevenue = dailyRevenue;
                ViewBag.PeriodLabel = selectedMonth.HasValue ? $"Tháng {selectedMonth}/{selectedYear}" : $"Năm {selectedYear}";

                return View();
            }
            catch (Exception ex)
            {
                LoggingHelper.LogError(ex);
                TempData["ErrorMessage"] = "Có lỗi xảy ra khi thực hiện thống kê.";
                return View();
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
